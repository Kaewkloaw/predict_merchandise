
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier

# Generate demo data
np.random.seed(42)
n_samples = 200

df = pd.DataFrame({
    'stock_qty': np.random.randint(10, 100, size=n_samples),
    'avg_daily_sales': np.random.uniform(0.5, 10.0, size=n_samples),
    'days_until_expiry': np.random.randint(5, 60, size=n_samples),
    'discount_applied': np.random.choice([0, 1], size=n_samples),
    'category': np.random.choice(['drink', 'snack', 'frozen', 'daily'], size=n_samples)
})

df = pd.get_dummies(df, columns=['category'], drop_first=True)
df['risky'] = (df['stock_qty'] / df['avg_daily_sales']) > df['days_until_expiry']
df['risky'] = df['risky'].astype(int)

X = df.drop(columns='risky')
y = df['risky']

model = RandomForestClassifier(random_state=42)
model.fit(X, y)

# UI
st.title("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô (‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏≠‡∏á)")
st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏≠‡∏á‡πÄ‡∏£‡πà‡∏á‡∏Ç‡∏≤‡∏¢")

stock_qty = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ä‡∏¥‡πâ‡∏ô)", 0, 200, 50)
avg_daily_sales = st.slider("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô", 0.1, 20.0, 2.0)
days_until_expiry = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏", 1, 90, 14)
discount_applied = st.selectbox("‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", [0, 1], format_func=lambda x: "‡∏°‡∏µ" if x == 1 else "‡πÑ‡∏°‡πà‡∏°‡∏µ")
category = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", ["drink", "snack", "frozen", "daily"])

input_df = pd.DataFrame([{
    "stock_qty": stock_qty,
    "avg_daily_sales": avg_daily_sales,
    "days_until_expiry": days_until_expiry,
    "discount_applied": discount_applied,
    "category": category
}])

input_df = pd.get_dummies(input_df, columns=['category'])
for col in X.columns:
    if col not in input_df.columns:
        input_df[col] = 0
input_df = input_df[X.columns]

if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"):
    risk_prob = model.predict_proba(input_df)[0][1]
    prediction = model.predict(input_df)[0]

    if prediction == 1:
        st.error(f"‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô! ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {risk_prob:.0%}")
        st.markdown("üëâ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏¥‡∏î **‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏≠‡∏á** ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
    else:
        st.success(f"‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {risk_prob:.0%})")
